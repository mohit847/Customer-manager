{"ast":null,"code":"import _asyncToGenerator from \"D:/project/Angular-JumpStart-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ViewContainerRef, ComponentFactoryResolver, ComponentRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/services/data.service\";\nimport * as i2 from \"../core/services/filter.service\";\nimport * as i3 from \"../core/services/logger.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"../shared/filter-textbox/filter-textbox.component\";\nimport * as i6 from \"../shared/pagination/pagination.component\";\nimport * as i7 from \"./customers-card/customers-card.component\";\nimport * as i8 from \"./customers-grid/customers-grid.component\";\nconst _c0 = [\"mapsContainer\"];\nexport class CustomersComponent {\n  constructor(componentFactoryResolver, dataService, filterService, logger) {\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.dataService = dataService;\n    this.filterService = filterService;\n    this.logger = logger;\n    this.title = '';\n    this.filterText = '';\n    this.customers = [];\n    this.displayMode = DisplayModeEnum.Card;\n    this.displayModeEnum = DisplayModeEnum;\n    this.totalRecords = 0;\n    this.pageSize = 10;\n    this.mapComponentRef = {};\n    this._filteredCustomers = [];\n    this.mapsViewContainerRef = {};\n  }\n\n  get filteredCustomers() {\n    return this._filteredCustomers;\n  }\n\n  set filteredCustomers(value) {\n    this._filteredCustomers = value;\n    this.updateMapComponentDataPoints();\n  }\n\n  ngOnInit() {\n    this.title = 'Customers';\n    this.filterText = 'Filter Customers:';\n    this.displayMode = DisplayModeEnum.Card;\n    this.getCustomersPage(1);\n  }\n\n  changeDisplayMode(mode) {\n    this.displayMode = mode;\n  }\n\n  pageChanged(page) {\n    this.getCustomersPage(page);\n  }\n\n  getCustomersPage(page) {\n    this.dataService.getCustomersPage((page - 1) * this.pageSize, this.pageSize).subscribe(response => {\n      this.customers = this.filteredCustomers = response.results;\n      this.totalRecords = response.totalRecords;\n    }, err => this.logger.log(err), () => this.logger.log('getCustomersPage() retrieved customers for page: ' + page));\n  }\n\n  filterChanged(data) {\n    if (data && this.customers) {\n      data = data.toUpperCase();\n      const props = ['firstName', 'lastName', 'city', 'state.name'];\n      this.filteredCustomers = this.filterService.filter(this.customers, data, props);\n    } else {\n      this.filteredCustomers = this.customers;\n    }\n  }\n\n  lazyLoadMapComponent() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.changeDisplayMode(DisplayModeEnum.Map);\n\n      if (!_this.mapsViewContainerRef.length) {\n        // Lazy load MapComponent\n        const {\n          MapComponent\n        } = yield import('../shared/map/map.component');\n        console.log('Lazy loaded map component!');\n        _this.mapComponentRef = _this.mapsViewContainerRef.createComponent(MapComponent);\n        _this.mapComponentRef.instance.zoom = 2;\n        _this.mapComponentRef.instance.dataPoints = _this.filteredCustomers;\n        _this.mapComponentRef.instance.enabled = true;\n      }\n    })();\n  }\n\n  updateMapComponentDataPoints() {\n    if (this.mapComponentRef && this.mapComponentRef.instance) {\n      this.mapComponentRef.instance.dataPoints = this.filteredCustomers;\n    }\n  }\n\n}\n\nCustomersComponent.ɵfac = function CustomersComponent_Factory(t) {\n  return new (t || CustomersComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.FilterService), i0.ɵɵdirectiveInject(i3.LoggerService));\n};\n\nCustomersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomersComponent,\n  selectors: [[\"cm-customers\"]],\n  viewQuery: function CustomersComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5, ViewContainerRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapsViewContainerRef = _t.first);\n    }\n  },\n  decls: 30,\n  vars: 12,\n  consts: [[1, \"customers\", \"view\", \"indent\"], [1, \"container\"], [1, \"glyphicon\", \"glyphicon-user\"], [1, \"row\"], [1, \"col-md-10\"], [1, \"navbar\"], [1, \"nav\", \"navbar-nav\"], [1, \"toolbar-item\"], [3, \"click\"], [1, \"glyphicon\", \"glyphicon-th-large\"], [1, \"glyphicon\", \"glyphicon-align-justify\"], [\"routerLink\", \"/customers/0/edit\"], [1, \"glyphicon\", \"glyphicon-plus\"], [1, \"navbar-right\", 3, \"changed\"], [3, \"customers\", \"hidden\"], [3, \"hidden\"], [\"mapsContainer\", \"\"], [3, \"totalItems\", \"pageSize\", \"pageChanged\"]],\n  template: function CustomersComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"header\")(3, \"h3\");\n      i0.ɵɵelement(4, \"span\", 2);\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(6, \"br\");\n      i0.ɵɵelementStart(7, \"div\", 3)(8, \"div\", 4)(9, \"div\", 5)(10, \"ul\", 6)(11, \"li\", 7)(12, \"a\", 8);\n      i0.ɵɵlistener(\"click\", function CustomersComponent_Template_a_click_12_listener() {\n        return ctx.changeDisplayMode(ctx.displayModeEnum.Card);\n      });\n      i0.ɵɵelement(13, \"span\", 9);\n      i0.ɵɵtext(14, \" Card View \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"li\", 7)(16, \"a\", 8);\n      i0.ɵɵlistener(\"click\", function CustomersComponent_Template_a_click_16_listener() {\n        return ctx.changeDisplayMode(ctx.displayModeEnum.Grid);\n      });\n      i0.ɵɵelement(17, \"span\", 10);\n      i0.ɵɵtext(18, \" List View \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"li\", 7)(20, \"a\", 11);\n      i0.ɵɵelement(21, \"span\", 12);\n      i0.ɵɵtext(22, \" New Customer \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(23, \"cm-filter-textbox\", 13);\n      i0.ɵɵlistener(\"changed\", function CustomersComponent_Template_cm_filter_textbox_changed_23_listener($event) {\n        return ctx.filterChanged($event);\n      });\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelement(24, \"cm-customers-card\", 14)(25, \"cm-customers-grid\", 14);\n      i0.ɵɵelementStart(26, \"div\", 15);\n      i0.ɵɵelementContainer(27, null, 16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"cm-pagination\", 17);\n      i0.ɵɵlistener(\"pageChanged\", function CustomersComponent_Template_cm_pagination_pageChanged_29_listener($event) {\n        return ctx.pageChanged($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate1(\" \", ctx.title, \" \");\n      i0.ɵɵadvance(7);\n      i0.ɵɵclassProp(\"active\", ctx.displayMode === ctx.displayModeEnum.Card);\n      i0.ɵɵadvance(4);\n      i0.ɵɵclassProp(\"active\", ctx.displayMode === ctx.displayModeEnum.Grid);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"customers\", ctx.filteredCustomers)(\"hidden\", ctx.displayMode !== ctx.displayModeEnum.Card);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"customers\", ctx.filteredCustomers)(\"hidden\", ctx.displayMode !== ctx.displayModeEnum.Grid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hidden\", ctx.displayMode !== ctx.displayModeEnum.Map);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"totalItems\", ctx.totalRecords)(\"pageSize\", ctx.pageSize);\n    }\n  },\n  dependencies: [i4.RouterLinkWithHref, i5.FilterTextboxComponent, i6.PaginationComponent, i7.CustomersCardComponent, i8.CustomersGridComponent],\n  encapsulation: 2\n});\nvar DisplayModeEnum;\n\n(function (DisplayModeEnum) {\n  DisplayModeEnum[DisplayModeEnum[\"Card\"] = 0] = \"Card\";\n  DisplayModeEnum[DisplayModeEnum[\"Grid\"] = 1] = \"Grid\";\n  DisplayModeEnum[DisplayModeEnum[\"Map\"] = 2] = \"Map\";\n})(DisplayModeEnum || (DisplayModeEnum = {}));","map":{"version":3,"mappings":"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","names":["ViewContainerRef","ComponentFactoryResolver","ComponentRef","CustomersComponent","constructor","componentFactoryResolver","dataService","filterService","logger","DisplayModeEnum","Card","filteredCustomers","_filteredCustomers","value","updateMapComponentDataPoints","ngOnInit","title","filterText","displayMode","getCustomersPage","changeDisplayMode","mode","pageChanged","page","pageSize","subscribe","response","customers","results","totalRecords","err","log","filterChanged","data","toUpperCase","props","filter","lazyLoadMapComponent","Map","mapsViewContainerRef","length","MapComponent","console","mapComponentRef","createComponent","instance","zoom","dataPoints","enabled","i0","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["D:\\project\\Angular-JumpStart-main\\src\\app\\customers\\customers.component.ts","D:\\project\\Angular-JumpStart-main\\src\\app\\customers\\customers.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild, \n  ViewContainerRef, ComponentFactoryResolver, ComponentRef } from '@angular/core';\n\nimport { DataService } from '../core/services/data.service';\nimport { ICustomer, IPagedResults } from '../shared/interfaces';\nimport { FilterService } from '../core/services/filter.service';\nimport { LoggerService } from '../core/services/logger.service';\n\n\n@Component({\n  selector: 'cm-customers',\n  templateUrl: './customers.component.html'\n})\nexport class CustomersComponent implements OnInit {\n\n  title: string = '';\n  filterText: string = '';\n  customers: ICustomer[] = [];\n  displayMode: DisplayModeEnum = DisplayModeEnum.Card;\n  displayModeEnum = DisplayModeEnum;\n  totalRecords = 0;\n  pageSize = 10;\n  mapComponentRef: ComponentRef<any> = {} as ComponentRef<any>;\n  _filteredCustomers: ICustomer[] = [];\n\n  get filteredCustomers() {\n    return this._filteredCustomers;\n  }\n\n  set filteredCustomers(value: ICustomer[]) {\n    this._filteredCustomers = value;\n    this.updateMapComponentDataPoints();\n  }\n\n  @ViewChild('mapsContainer', { read: ViewContainerRef }) \n  private mapsViewContainerRef: ViewContainerRef = {} as ViewContainerRef;\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver,\n    private dataService: DataService,\n    private filterService: FilterService,\n    private logger: LoggerService) { }\n\n  ngOnInit() {\n    this.title = 'Customers';\n    this.filterText = 'Filter Customers:';\n    this.displayMode = DisplayModeEnum.Card;\n\n    this.getCustomersPage(1);\n  }\n\n  changeDisplayMode(mode: DisplayModeEnum) {\n      this.displayMode = mode;\n  }\n\n  pageChanged(page: number) {\n    this.getCustomersPage(page);\n  }\n\n  getCustomersPage(page: number) {\n    this.dataService.getCustomersPage((page - 1) * this.pageSize, this.pageSize)\n        .subscribe((response: IPagedResults<ICustomer[]>) => {\n          this.customers = this.filteredCustomers = response.results;\n          this.totalRecords = response.totalRecords;\n        },\n        (err: any) => this.logger.log(err),\n        () => this.logger.log('getCustomersPage() retrieved customers for page: ' + page));\n  }\n\n  filterChanged(data: string) {\n    if (data && this.customers) {\n        data = data.toUpperCase();\n        const props = ['firstName', 'lastName', 'city', 'state.name'];\n        this.filteredCustomers = this.filterService.filter<ICustomer>(this.customers, data, props);\n    } else {\n      this.filteredCustomers = this.customers;\n    }\n  }\n\n  async lazyLoadMapComponent() {\n    this.changeDisplayMode(DisplayModeEnum.Map);\n    if (!this.mapsViewContainerRef.length) {\n      // Lazy load MapComponent\n      const { MapComponent } = await import('../shared/map/map.component');\n      console.log('Lazy loaded map component!');\n      this.mapComponentRef = this.mapsViewContainerRef.createComponent(MapComponent);\n      this.mapComponentRef.instance.zoom = 2;\n      this.mapComponentRef.instance.dataPoints = this.filteredCustomers;\n      this.mapComponentRef.instance.enabled = true;\n    }\n  }\n\n  updateMapComponentDataPoints() {\n    if (this.mapComponentRef && this.mapComponentRef.instance) {\n      this.mapComponentRef.instance.dataPoints = this.filteredCustomers;\n    }\n  }\n\n\n}\n\nenum DisplayModeEnum {\n  Card = 0,\n  Grid = 1,\n  Map = 2\n}\n","<div class=\"customers view indent\">\n    <div class=\"container\">\n        <header>\n            <h3>\n                <span class=\"glyphicon glyphicon-user\"></span>\n                {{ title }}\n            </h3>\n        </header>\n        <br />\n        <div class=\"row\">\n            <div class=\"col-md-10\">\n                <div class=\"navbar\">\n                    <ul class=\"nav navbar-nav\">\n                        <li class=\"toolbar-item\">\n                            <a (click)=\"changeDisplayMode(displayModeEnum.Card)\" [class.active]=\"displayMode === displayModeEnum.Card\">\n                                <span class=\"glyphicon glyphicon-th-large\"></span> Card View\n                            </a>\n                        </li>\n                        <li class=\"toolbar-item\">\n                            <a (click)=\"changeDisplayMode(displayModeEnum.Grid)\" [class.active]=\"displayMode === displayModeEnum.Grid\">\n                                <span class=\"glyphicon glyphicon-align-justify\"></span> List View\n                            </a>\n                        </li>\n                        <!-- <li class=\"toolbar-item\">\n                            <a (click)=\"lazyLoadMapComponent()\" [class.active]=\"displayMode === displayModeEnum.Map\">\n                                <span class=\"glyphicon glyphicon-map-marker\"></span> Map View\n                            </a>\n                        </li> -->\n                        <li class=\"toolbar-item\">\n                            <a routerLink=\"/customers/0/edit\">\n                                <span class=\"glyphicon glyphicon-plus\"></span> New Customer\n                            </a>\n                        </li>\n                    </ul>\n                    <cm-filter-textbox class=\"navbar-right\"\n                     (changed)=\"filterChanged($event)\"></cm-filter-textbox>\n                </div>\n            </div>\n        </div>\n        \n        <cm-customers-card \n          [customers]=\"filteredCustomers\" \n          [hidden]=\"displayMode !== displayModeEnum.Card\"></cm-customers-card>\n    \n        <cm-customers-grid \n          [customers]=\"filteredCustomers\" \n          [hidden]=\"displayMode !== displayModeEnum.Grid\"></cm-customers-grid>\n\n        <!-- lazy load the map component -->\n        <div [hidden]=\"displayMode !== displayModeEnum.Map\">\n            <ng-container #mapsContainer></ng-container>\n        </div>\n\n        <!-- \n            This could be used to eagerly load the map component.\n            Would need to import MapModule into either SharedModule (and export it) or \n            into CustomersModule to use it this way.\n        -->\n        <!-- <cm-map *ngIf=\"filteredCustomers.length\" \n            [zoom]=\"2\" \n            [enabled]=\"displayMode === displayModeEnum.Map\" \n            [hidden]=\"displayMode !== displayModeEnum.Map\">\n          <cm-map-point \n            *ngFor=\"let customer of filteredCustomers\" \n            [latitude]=\"customer.latitude\" \n            [longitude]=\"customer.longitude\"\n            [markerText]=\"'<h3>' + customer.firstName + ' ' + customer.lastName + '</h3>' + customer.city + ', ' + customer.state.name\"></cm-map-point>\n        </cm-map> -->\n\n        <cm-pagination\n            [totalItems]=\"totalRecords\" \n            [pageSize]=\"pageSize\" \n            (pageChanged)=\"pageChanged($event)\"></cm-pagination>\n          \n    </div>\n</div>\n"]},"metadata":{},"sourceType":"module"}