{"ast":null,"code":"/// <reference path=\"../../../../node_modules/@types/googlemaps/index.d.ts\" />\n/// <reference path=\"../../../../node_modules/@types/googlemaps/index.d.ts\" />\nimport { ElementRef, QueryList } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { MapPointComponent } from './map-point.component';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"mapContainer\"];\nexport class MapComponent {\n  constructor() {\n    this.isEnabled = false;\n    this.loadingScript = false;\n    this.map = {};\n    this.markers = [];\n    this.mapHeight = null;\n    this.mapWidth = null;\n    this.height = 0;\n    this.width = 0;\n    this.latitude = 34.5133;\n    this.longitude = -94.1629;\n    this.markerText = 'Your Location';\n    this.zoom = 8;\n    this._dataPoints = [];\n    this.mapDiv = {};\n    this.mapPoints = {};\n  }\n\n  get dataPoints() {\n    return this._dataPoints;\n  }\n\n  set dataPoints(value) {\n    this._dataPoints = value;\n    this.renderMapPoints();\n  } // Necessary since a map rendered while container is hidden\n  // will not load the map tiles properly and show a grey screen\n\n\n  get enabled() {\n    return this.isEnabled;\n  }\n\n  set enabled(isEnabled) {\n    this.isEnabled = isEnabled;\n    this.init();\n  }\n\n  ngOnInit() {\n    if (this.latitude && this.longitude) {\n      if (this.mapHeight && this.mapWidth) {\n        this.mapHeight = this.height + 'px';\n        this.mapWidth = this.width + 'px';\n      } else {\n        const hw = this.getWindowHeightWidth(this.mapDiv.nativeElement.ownerDocument);\n        this.mapHeight = hw.height / 2 + 'px';\n        this.mapWidth = hw.width + 'px';\n      }\n    }\n  }\n\n  ngAfterContentInit() {\n    this.mapPoints.changes.pipe(debounceTime(500)).subscribe(() => {\n      if (this.enabled) {\n        this.renderMapPoints();\n      }\n    });\n  }\n\n  init() {\n    // Need slight delay to avoid grey box when google script has previously been loaded.\n    // Otherwise map <div> container may not be visible yet which causes the grey box.\n    setTimeout(() => {\n      this.ensureScript();\n    }, 200);\n  }\n\n  getWindowHeightWidth(document) {\n    let width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n    if (width > 900) {\n      width = 900;\n    }\n\n    return {\n      height: height,\n      width: width\n    };\n  }\n\n  ensureScript() {\n    this.loadingScript = true;\n    const document = this.mapDiv.nativeElement.ownerDocument;\n    const script = document.querySelector('script[id=\"googlemaps\"]');\n\n    if (script) {\n      if (this.isEnabled) {\n        this.renderMap();\n      }\n    } else {\n      const mapsScript = document.createElement('script');\n      mapsScript.id = 'googlemaps';\n      mapsScript.type = 'text/javascript';\n      mapsScript.async = true;\n      mapsScript.defer = true;\n      mapsScript.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCG1KDldeF_2GzaTXrEHR0l6cyCS7AnmBw';\n\n      mapsScript.onload = () => {\n        this.loadingScript = false;\n\n        if (this.isEnabled) {\n          this.renderMap();\n        }\n      };\n\n      document.body.appendChild(mapsScript);\n    }\n  }\n\n  renderMap() {\n    const latlng = this.createLatLong(this.latitude, this.longitude);\n    const options = {\n      zoom: this.zoom,\n      center: latlng,\n      mapTypeControl: true,\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n    this.map = new google.maps.Map(this.mapDiv.nativeElement, options); // See if we have any mapPoints (child content) or dataPoints (@Input property)\n\n    if (this.mapPoints && this.mapPoints.length || this.dataPoints && this.dataPoints.length) {\n      this.renderMapPoints();\n    } else {\n      this.createMarker(latlng, this.markerText);\n    }\n  }\n\n  createLatLong(latitude, longitude) {\n    return latitude && longitude ? new google.maps.LatLng(latitude, longitude) : null;\n  }\n\n  renderMapPoints() {\n    if (this.map && this.isEnabled) {\n      this.clearMapPoints(); // lon/lat can be passed as child content or via the dataPoints @Input property\n\n      const mapPoints = this.mapPoints && this.mapPoints.length ? this.mapPoints : this.dataPoints;\n\n      if (mapPoints) {\n        for (const point of mapPoints) {\n          let markerText = point.markerText ? point.markerText : `<h3>${point.firstName} ${point.lastName}</h3>`;\n          const mapPointLatlng = this.createLatLong(point.latitude, point.longitude);\n          this.createMarker(mapPointLatlng, markerText);\n        }\n      }\n    }\n  }\n\n  clearMapPoints() {\n    this.markers.forEach(marker => {\n      marker.setMap(null);\n    });\n    this.markers = [];\n  }\n\n  createMarker(position, title) {\n    const infowindow = new google.maps.InfoWindow({\n      content: title\n    });\n    const marker = new google.maps.Marker({\n      position: position,\n      map: this.map,\n      title: title,\n      animation: google.maps.Animation.DROP\n    });\n    this.markers.push(marker);\n    marker.addListener('click', () => {\n      infowindow.open(this.map, marker);\n    });\n  }\n\n}\n\nMapComponent.ɵfac = function MapComponent_Factory(t) {\n  return new (t || MapComponent)();\n};\n\nMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MapComponent,\n  selectors: [[\"cm-map\"]],\n  contentQueries: function MapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MapPointComponent, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapPoints = _t);\n    }\n  },\n  viewQuery: function MapComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapDiv = _t.first);\n    }\n  },\n  inputs: {\n    height: \"height\",\n    width: \"width\",\n    latitude: \"latitude\",\n    longitude: \"longitude\",\n    markerText: \"markerText\",\n    zoom: \"zoom\",\n    dataPoints: \"dataPoints\",\n    enabled: \"enabled\"\n  },\n  decls: 3,\n  vars: 4,\n  consts: [[\"mapContainer\", \"\"]],\n  template: function MapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", null, 0);\n      i0.ɵɵtext(2, \"Map Loading....\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"height\", ctx.mapHeight)(\"width\", ctx.mapWidth);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});","map":{"version":3,"mappings":"AAAA;AAAA;AAEA,SAEmBA,UAFnB,EAE+BC,SAF/B,QAGO,eAHP;AAKA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,iBAAT,QAAkC,uBAAlC;;;AAWA,OAAM,MAAOC,YAAP,CAAmB;EAuCvBC;IArCQ,iBAAqB,KAArB;IACA,qBAAyB,KAAzB;IACA,WAAuB,EAAvB;IACA,eAAgC,EAAhC;IACR,iBAA2B,IAA3B;IACA,gBAA0B,IAA1B;IAES,cAAiB,CAAjB;IACA,aAAgB,CAAhB;IACA,gBAAW,OAAX;IACA,iBAAY,CAAC,OAAb;IACA,kBAAa,eAAb;IACA,YAAO,CAAP;IACD,mBAA+B,EAA/B;IAqBqC,cAAqB,EAArB;IACT,iBAA0C,EAA1C;EAEnB;;EAvBa,IAAVC,UAAU;IAC5B,OAAO,KAAKC,WAAZ;EACD;;EAEoB,IAAVD,UAAU,CAACE,KAAD,EAAa;IAChC,KAAKD,WAAL,GAAmBC,KAAnB;IACA,KAAKC,eAAL;EACD,CAvBsB,CAyBvB;EACA;;;EACoB,IAAPC,OAAO;IAClB,OAAO,KAAKC,SAAZ;EACD;;EAEU,IAAPD,OAAO,CAACC,SAAD,EAAmB;IAC5B,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,IAAL;EACD;;EAODC,QAAQ;IACN,IAAI,KAAKC,QAAL,IAAiB,KAAKC,SAA1B,EAAqC;MACnC,IAAI,KAAKC,SAAL,IAAkB,KAAKC,QAA3B,EAAqC;QACnC,KAAKD,SAAL,GAAiB,KAAKE,MAAL,GAAc,IAA/B;QACA,KAAKD,QAAL,GAAgB,KAAKE,KAAL,GAAa,IAA7B;MACD,CAHD,MAGO;QACL,MAAMC,EAAE,GAAG,KAAKC,oBAAL,CAA0B,KAAKC,MAAL,CAAYC,aAAZ,CAA0BC,aAApD,CAAX;QACA,KAAKR,SAAL,GAAiBI,EAAE,CAACF,MAAH,GAAY,CAAZ,GAAgB,IAAjC;QACA,KAAKD,QAAL,GAAgBG,EAAE,CAACD,KAAH,GAAW,IAA3B;MACD;IACF;EACF;;EAEDM,kBAAkB;IAChB,KAAKC,SAAL,CAAeC,OAAf,CACKC,IADL,CAEM1B,YAAY,CAAC,GAAD,CAFlB,EAIK2B,SAJL,CAIe,MAAK;MACd,IAAI,KAAKnB,OAAT,EAAkB;QAChB,KAAKD,eAAL;MACD;IACF,CARL;EASD;;EAEDG,IAAI;IACF;IACA;IACAkB,UAAU,CAAC,MAAK;MACd,KAAKC,YAAL;IACD,CAFS,EAEP,GAFO,CAAV;EAGD;;EAEOV,oBAAoB,CAACW,QAAD,EAAmB;IAC7C,IAAIb,KAAK,GAAGc,MAAM,CAACC,UAAP,IACPF,QAAQ,CAACG,eAAT,CAAyBC,WADlB,IAEPJ,QAAQ,CAACK,IAAT,CAAcD,WAFnB;IAIA,MAAMlB,MAAM,GAAGe,MAAM,CAACK,WAAP,IACVN,QAAQ,CAACG,eAAT,CAAyBI,YADf,IAEVP,QAAQ,CAACK,IAAT,CAAcE,YAFnB;;IAIA,IAAIpB,KAAK,GAAG,GAAZ,EAAiB;MAAEA,KAAK,GAAG,GAAR;IAAc;;IAEjC,OAAO;MAAED,MAAM,EAAEA,MAAV;MAAkBC,KAAK,EAAEA;IAAzB,CAAP;EACD;;EAEOY,YAAY;IAClB,KAAKS,aAAL,GAAqB,IAArB;IACA,MAAMR,QAAQ,GAAG,KAAKV,MAAL,CAAYC,aAAZ,CAA0BC,aAA3C;IACA,MAAMiB,MAAM,GAAsBT,QAAQ,CAACU,aAAT,CAAuB,yBAAvB,CAAlC;;IACA,IAAID,MAAJ,EAAY;MACV,IAAI,KAAK9B,SAAT,EAAoB;QAAE,KAAKgC,SAAL;MAAmB;IAC1C,CAFD,MAEO;MACL,MAAMC,UAAU,GAAGZ,QAAQ,CAACa,aAAT,CAAuB,QAAvB,CAAnB;MACAD,UAAU,CAACE,EAAX,GAAgB,YAAhB;MACAF,UAAU,CAACG,IAAX,GAAkB,iBAAlB;MACAH,UAAU,CAACI,KAAX,GAAmB,IAAnB;MACAJ,UAAU,CAACK,KAAX,GAAmB,IAAnB;MACAL,UAAU,CAACM,GAAX,GAAiB,qFAAjB;;MACAN,UAAU,CAACO,MAAX,GAAoB,MAAK;QACvB,KAAKX,aAAL,GAAqB,KAArB;;QACA,IAAI,KAAK7B,SAAT,EAAoB;UAAE,KAAKgC,SAAL;QAAmB;MAC1C,CAHD;;MAIAX,QAAQ,CAACK,IAAT,CAAce,WAAd,CAA0BR,UAA1B;IACD;EACF;;EAEOD,SAAS;IACf,MAAMU,MAAM,GAAG,KAAKC,aAAL,CAAmB,KAAKxC,QAAxB,EAAkC,KAAKC,SAAvC,CAAf;IACA,MAAMwC,OAAO,GAAG;MACdC,IAAI,EAAE,KAAKA,IADG;MAEdC,MAAM,EAAEJ,MAFM;MAGdK,cAAc,EAAE,IAHF;MAIdC,SAAS,EAAEC,MAAM,CAACC,IAAP,CAAYC,SAAZ,CAAsBC;IAJnB,CAAhB;IAOA,KAAKC,GAAL,GAAW,IAAIJ,MAAM,CAACC,IAAP,CAAYI,GAAhB,CAAoB,KAAK3C,MAAL,CAAYC,aAAhC,EAA+CgC,OAA/C,CAAX,CATe,CAWf;;IACA,IAAK,KAAK7B,SAAL,IAAkB,KAAKA,SAAL,CAAewC,MAAlC,IAA8C,KAAK5D,UAAL,IAAmB,KAAKA,UAAL,CAAgB4D,MAArF,EAA8F;MAC5F,KAAKzD,eAAL;IACD,CAFD,MAEO;MACL,KAAK0D,YAAL,CAAkBd,MAAlB,EAA0B,KAAKe,UAA/B;IACD;EACF;;EAEOd,aAAa,CAACxC,QAAD,EAAmBC,SAAnB,EAAoC;IACvD,OAAQD,QAAQ,IAAIC,SAAb,GAA0B,IAAI6C,MAAM,CAACC,IAAP,CAAYQ,MAAhB,CAAuBvD,QAAvB,EAAiCC,SAAjC,CAA1B,GAAwE,IAA/E;EACD;;EAEON,eAAe;IACrB,IAAI,KAAKuD,GAAL,IAAY,KAAKrD,SAArB,EAAgC;MAC9B,KAAK2D,cAAL,GAD8B,CAG9B;;MACA,MAAM5C,SAAS,GAAI,KAAKA,SAAL,IAAkB,KAAKA,SAAL,CAAewC,MAAlC,GAA4C,KAAKxC,SAAjD,GAA6D,KAAKpB,UAApF;;MAEA,IAAIoB,SAAJ,EAAe;QACb,KAAK,MAAM6C,KAAX,IAAoB7C,SAApB,EAA+B;UAC7B,IAAI0C,UAAU,GAAIG,KAAK,CAACH,UAAP,GAAqBG,KAAK,CAACH,UAA3B,GAAwC,OAAOG,KAAK,CAACC,SAAS,IAAID,KAAK,CAACE,QAAQ,OAAjG;UACA,MAAMC,cAAc,GAAG,KAAKpB,aAAL,CAAmBiB,KAAK,CAACzD,QAAzB,EAAmCyD,KAAK,CAACxD,SAAzC,CAAvB;UACA,KAAKoD,YAAL,CAAkBO,cAAlB,EAAkCN,UAAlC;QACD;MACF;IACF;EACF;;EAEOE,cAAc;IACpB,KAAKK,OAAL,CAAaC,OAAb,CAAsBC,MAAD,IAA+B;MAClDA,MAAM,CAACC,MAAP,CAAc,IAAd;IACD,CAFD;IAGA,KAAKH,OAAL,GAAe,EAAf;EACD;;EAEOR,YAAY,CAACY,QAAD,EAA+BC,KAA/B,EAA4C;IAC9D,MAAMC,UAAU,GAAG,IAAIrB,MAAM,CAACC,IAAP,CAAYqB,UAAhB,CAA2B;MAC5CC,OAAO,EAAEH;IADmC,CAA3B,CAAnB;IAIA,MAAMH,MAAM,GAAG,IAAIjB,MAAM,CAACC,IAAP,CAAYuB,MAAhB,CAAuB;MACpCL,QAAQ,EAAEA,QAD0B;MAEpCf,GAAG,EAAE,KAAKA,GAF0B;MAGpCgB,KAAK,EAAEA,KAH6B;MAIpCK,SAAS,EAAEzB,MAAM,CAACC,IAAP,CAAYyB,SAAZ,CAAsBC;IAJG,CAAvB,CAAf;IAOA,KAAKZ,OAAL,CAAaa,IAAb,CAAkBX,MAAlB;IAEAA,MAAM,CAACY,WAAP,CAAmB,OAAnB,EAA4B,MAAK;MAC/BR,UAAU,CAACS,IAAX,CAAgB,KAAK1B,GAArB,EAA0Ba,MAA1B;IACD,CAFD;EAGD;;AA7KsB;;;mBAAZzE;AAAY;;;QAAZA;EAAYuF;EAAAC;IAAA;kCAqCNzF,mBAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCxDpC0F;MAAuEA;MAAeA;;;;MAAnEA,wCAA0B,OAA1B,EAA0BC,YAA1B","names":["ElementRef","QueryList","debounceTime","MapPointComponent","MapComponent","constructor","dataPoints","_dataPoints","value","renderMapPoints","enabled","isEnabled","init","ngOnInit","latitude","longitude","mapHeight","mapWidth","height","width","hw","getWindowHeightWidth","mapDiv","nativeElement","ownerDocument","ngAfterContentInit","mapPoints","changes","pipe","subscribe","setTimeout","ensureScript","document","window","innerWidth","documentElement","clientWidth","body","innerHeight","clientHeight","loadingScript","script","querySelector","renderMap","mapsScript","createElement","id","type","async","defer","src","onload","appendChild","latlng","createLatLong","options","zoom","center","mapTypeControl","mapTypeId","google","maps","MapTypeId","ROADMAP","map","Map","length","createMarker","markerText","LatLng","clearMapPoints","point","firstName","lastName","mapPointLatlng","markers","forEach","marker","setMap","position","title","infowindow","InfoWindow","content","Marker","animation","Animation","DROP","push","addListener","open","selectors","contentQueries","i0","ctx"],"sourceRoot":"","sources":["D:\\project\\Angular-JumpStart-main\\src\\app\\shared\\map\\map.component.ts","D:\\project\\Angular-JumpStart-main\\src\\app\\shared\\map\\map.component.html"],"sourcesContent":["/// <reference path=\"../../../../node_modules/@types/googlemaps/index.d.ts\" />\n\nimport {\n  Component, OnInit, AfterContentInit, Input, ViewChild,\n  ContentChildren, ElementRef, QueryList, ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { debounceTime } from 'rxjs/operators';\nimport { MapPointComponent } from './map-point.component';\nimport { IMapDataPoint } from '../../shared/interfaces';\n\n@Component({\n  selector: 'cm-map',\n  templateUrl: './map.component.html',\n  // When using OnPush detectors, then the framework will check an OnPush\n  // component when any of its input properties changes, when it fires\n  // an event, or when an observable fires an event ~ Victor Savkin (Angular Team)\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MapComponent implements OnInit, AfterContentInit {\n\n  private isEnabled: boolean = false;\n  private loadingScript: boolean = false;\n  private map: google.maps.Map = {} as google.maps.Map;\n  private markers: google.maps.Marker[] = [];\n  mapHeight: string | null = null;\n  mapWidth: string | null = null;\n\n  @Input() height: number = 0;\n  @Input() width: number = 0;\n  @Input() latitude = 34.5133;\n  @Input() longitude = -94.1629;\n  @Input() markerText = 'Your Location';\n  @Input() zoom = 8;\n  private _dataPoints: IMapDataPoint[] = [];\n  @Input() public get dataPoints() {\n    return this._dataPoints as IMapDataPoint[];\n  }\n\n  public set dataPoints(value: any[]) {\n    this._dataPoints = value;\n    this.renderMapPoints();\n  }\n\n  // Necessary since a map rendered while container is hidden\n  // will not load the map tiles properly and show a grey screen\n  @Input() get enabled(): boolean {\n    return this.isEnabled;\n  }\n\n  set enabled(isEnabled: boolean) {\n    this.isEnabled = isEnabled;\n    this.init();\n  }\n\n  @ViewChild('mapContainer', { static: true }) mapDiv: ElementRef = {} as ElementRef;\n  @ContentChildren(MapPointComponent) mapPoints: QueryList<MapPointComponent> = {} as QueryList<MapPointComponent>;\n\n  constructor() { }\n\n  ngOnInit() {\n    if (this.latitude && this.longitude) {\n      if (this.mapHeight && this.mapWidth) {\n        this.mapHeight = this.height + 'px';\n        this.mapWidth = this.width + 'px';\n      } else {\n        const hw = this.getWindowHeightWidth(this.mapDiv.nativeElement.ownerDocument);\n        this.mapHeight = hw.height / 2 + 'px';\n        this.mapWidth = hw.width + 'px';\n      }\n    }\n  }\n\n  ngAfterContentInit() {\n    this.mapPoints.changes\n        .pipe(\n          debounceTime(500)\n        )\n        .subscribe(() => {\n          if (this.enabled) { \n            this.renderMapPoints(); \n          }\n        });\n  }\n\n  init() {\n    // Need slight delay to avoid grey box when google script has previously been loaded.\n    // Otherwise map <div> container may not be visible yet which causes the grey box.\n    setTimeout(() => {\n      this.ensureScript();\n    }, 200);\n  }\n\n  private getWindowHeightWidth(document: Document) {\n    let width = window.innerWidth\n      || document.documentElement.clientWidth\n      || document.body.clientWidth;\n\n    const height = window.innerHeight\n      || document.documentElement.clientHeight\n      || document.body.clientHeight;\n\n    if (width > 900) { width = 900; }\n\n    return { height: height, width: width };\n  }\n\n  private ensureScript() {\n    this.loadingScript = true;\n    const document = this.mapDiv.nativeElement.ownerDocument;\n    const script = <HTMLScriptElement>document.querySelector('script[id=\"googlemaps\"]');\n    if (script) {\n      if (this.isEnabled) { this.renderMap(); }\n    } else {\n      const mapsScript = document.createElement('script');\n      mapsScript.id = 'googlemaps';\n      mapsScript.type = 'text/javascript';\n      mapsScript.async = true;\n      mapsScript.defer = true;\n      mapsScript.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCG1KDldeF_2GzaTXrEHR0l6cyCS7AnmBw';\n      mapsScript.onload = () => {\n        this.loadingScript = false;\n        if (this.isEnabled) { this.renderMap(); }\n      };\n      document.body.appendChild(mapsScript);\n    }\n  }\n\n  private renderMap() {\n    const latlng = this.createLatLong(this.latitude, this.longitude) as google.maps.LatLng;\n    const options = {\n      zoom: this.zoom,\n      center: latlng,\n      mapTypeControl: true,\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n    } as google.maps.MapOptions;\n\n    this.map = new google.maps.Map(this.mapDiv.nativeElement, options);\n\n    // See if we have any mapPoints (child content) or dataPoints (@Input property)\n    if ((this.mapPoints && this.mapPoints.length) || (this.dataPoints && this.dataPoints.length)) {\n      this.renderMapPoints();\n    } else {\n      this.createMarker(latlng, this.markerText);\n    }\n  }\n\n  private createLatLong(latitude: number, longitude: number) {\n    return (latitude && longitude) ? new google.maps.LatLng(latitude, longitude) : null;\n  }\n\n  private renderMapPoints() {\n    if (this.map && this.isEnabled) {\n      this.clearMapPoints();\n\n      // lon/lat can be passed as child content or via the dataPoints @Input property\n      const mapPoints = (this.mapPoints && this.mapPoints.length) ? this.mapPoints : this.dataPoints;\n\n      if (mapPoints) {\n        for (const point of mapPoints) {\n          let markerText = (point.markerText) ? point.markerText : `<h3>${point.firstName} ${point.lastName}</h3>`;\n          const mapPointLatlng = this.createLatLong(point.latitude, point.longitude) as google.maps.LatLng;\n          this.createMarker(mapPointLatlng, markerText);\n        }\n      }\n    }\n  }\n\n  private clearMapPoints() {\n    this.markers.forEach((marker: google.maps.Marker) => {\n      marker.setMap(null);\n    });\n    this.markers = [];\n  }\n\n  private createMarker(position: google.maps.LatLng, title: string) {\n    const infowindow = new google.maps.InfoWindow({\n      content: title\n    });\n\n    const marker = new google.maps.Marker({\n      position: position,\n      map: this.map,\n      title: title,\n      animation: google.maps.Animation.DROP\n    });\n\n    this.markers.push(marker);\n\n    marker.addListener('click', () => {\n      infowindow.open(this.map, marker);\n    });\n  }\n}\n","<div #mapContainer [style.height]=\"mapHeight\" [style.width]=\"mapWidth\">Map Loading....</div>"]},"metadata":{},"sourceType":"module"}