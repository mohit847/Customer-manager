{"version":3,"file":"src_app_customer_customer_module_ts.js","mappings":"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","sources":["./src/app/customer/customer-details/customer-details.component.ts","./src/app/customer/customer-details/customer-details.component.html","./src/app/customer/customer-edit/customer-edit.component.ts","./src/app/customer/customer-edit/customer-edit.component.html","./src/app/customer/customer-orders/customer-orders.component.ts","./src/app/customer/customer-orders/customer-orders.component.html","./src/app/customer/customer-routing.module.ts","./src/app/customer/customer.component.ts","./src/app/customer/customer.component.html","./src/app/customer/customer.module.ts","./src/app/customer/guards/can-activate.guard.ts","./src/app/customer/guards/can-deactivate.guard.ts","./src/app/shared/interfaces.ts"],"sourcesContent":["import { Component, OnInit, ComponentRef, ViewChild, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\n\nimport { ICustomer } from '../../shared/interfaces';\nimport { DataService } from '../../core/services/data.service';\nimport { MapPointComponent } from 'src/app/shared/map/map-point.component';\n\n@Component({\n  selector: 'cm-customer-details',\n  templateUrl: './customer-details.component.html',\n  styleUrls: ['./customer-details.component.css']\n})\nexport class CustomerDetailsComponent implements OnInit {\n\n  customer: ICustomer | null = null;\n  mapEnabled: boolean = false;\n  mapComponentRef: ComponentRef<any> = {} as ComponentRef<any>;\n\n  @ViewChild('mapsContainer', { read: ViewContainerRef }) \n  private mapsViewContainerRef: ViewContainerRef = {} as ViewContainerRef;\n\n  constructor(private route: ActivatedRoute, \n    private dataService: DataService,\n    private componentFactoryResolver: ComponentFactoryResolver) { }\n\n  ngOnInit() {\n    // Subscribe to params so if it changes we pick it up. Could use this.route.parent.snapshot.params[\"id\"] to simplify it.\n    this.route.parent?.params.subscribe((params: Params) => {\n      const id = +params['id'];\n      if (id) {\n        this.dataService.getCustomer(id)\n          .subscribe((customer: ICustomer) => {\n            this.customer = customer;\n            if (this.customer && this.customer.latitude) {\n              this.lazyLoadMapComponent();\n              // this.mapEnabled = true; // For eager loading map\n            }\n          });\n      }\n    });\n  }\n\n  async lazyLoadMapComponent() {\n    if (!this.mapsViewContainerRef.length) {\n      // Lazy load MapComponent\n      const { MapComponent } = await import('../../shared/map/map.component');\n      console.log('Lazy loaded map component for customer!');\n      this.mapComponentRef = this.mapsViewContainerRef.createComponent(MapComponent);\n      this.mapComponentRef.instance.zoom = 10;\n      this.mapComponentRef.instance.customer = this.customer;\n      this.mapComponentRef.instance.enabled = true;\n    }\n  }\n\n\n}\n","<div class=\"container\">\n  <div class=\"row\" *ngIf=\"customer\">\n    <div class=\"col-md-2\">\n      <img src=\"assets/images/{{customer.gender | lowercase}}.png\" class=\"details-image\" title=\"customer picture\" />\n    </div>\n    <div class=\"col-md-10\">\n      <h4>    \n          {{ customer.firstName | capitalize }} {{ customer.lastName | capitalize }}&nbsp;          \n      </h4>\n      <br />\n      {{ customer.address }}\n      <br />\n      {{ customer.city }}, {{ customer.state.name }}\n    </div>\n  </div>    \n  <br /><br />\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <!-- <cm-map [latitude]=\"customer.latitude\" \n           [longitude]=\"customer.longitude\" \n           [zoom]=\"10\" \n           [enabled]=\"mapEnabled\"\n           [markerText]=\"'<h3>' + customer.firstName + ' ' + customer.lastName + '</h3>' + customer.city + ', ' + customer.state.name\"></cm-map> -->\n          \n      <!-- lazy load the map component -->\n      <div>\n          <ng-container #mapsContainer></ng-container>\n      </div>\n    </div>\n  </div>\n</div>   \n<div *ngIf=\"!customer\" class=\"container\">\n   No customer found\n</div>  ","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { NgForm } from '@angular/forms';\n\nimport { DataService } from '../../core/services/data.service';\nimport { ModalService, IModalContent } from '../../core/modal/modal.service';\nimport { ICustomer, IState } from '../../shared/interfaces';\nimport { GrowlerService, GrowlerMessageType } from '../../core/growler/growler.service';\nimport { LoggerService } from '../../core/services/logger.service';\n\n@Component({\n  selector: 'cm-customer-edit',\n  templateUrl: './customer-edit.component.html',\n  styleUrls: ['./customer-edit.component.css']\n})\nexport class CustomerEditComponent implements OnInit {\n\n  customer: ICustomer =\n    {\n      id: 0,\n      firstName: '',\n      lastName: '',\n      gender: '',\n      address: '',\n      city: '',\n      state: {\n        abbreviation: '',\n        name: ''\n      }\n    };\n  states: IState[] = [];\n  errorMessage: string = '';\n  deleteMessageEnabled: boolean = false;\n  operationText = 'Insert';\n  @ViewChild('customerForm', { static: true }) customerForm: NgForm = {} as NgForm;\n\n  constructor(private router: Router,\n    private route: ActivatedRoute,\n    private dataService: DataService,\n    private growler: GrowlerService,\n    private modalService: ModalService,\n    private logger: LoggerService) { }\n\n  ngOnInit() {\n    // Subscribe to params so if it changes we pick it up. Don't technically need that here\n    // since param won't be changing while component is alive.\n    // Could use this.route.parent.snapshot.params[\"id\"] to simplify it.\n    this.route.parent?.params.subscribe((params: Params) => {\n      const id = +params['id'];\n      if (id !== 0) {\n        this.operationText = 'Update';\n        this.getCustomer(id);\n      }\n    });\n\n    this.dataService.getStates().subscribe((states: IState[]) => this.states = states);\n  }\n\n  getCustomer(id: number) {\n    this.dataService.getCustomer(id).subscribe((customer: ICustomer) => {\n      this.customer = customer;\n    });\n  }\n\n  submit() {\n    if (this.customer.id === 0) {\n      this.dataService.insertCustomer(this.customer)\n        .subscribe((insertedCustomer: ICustomer) => {\n          if (insertedCustomer) {\n            // Mark form as pristine so that CanDeactivateGuard won't prompt before navigation\n            this.customerForm.form.markAsPristine();\n            this.router.navigate(['/customers']);\n          } else {\n            const msg = 'Unable to insert customer';\n            this.growler.growl(msg, GrowlerMessageType.Danger);\n            this.errorMessage = msg;\n          }\n        },\n          (err: any) => this.logger.log(err));\n    } else {\n      this.dataService.updateCustomer(this.customer)\n        .subscribe((status: boolean) => {\n          if (status) {\n            // Mark form as pristine so that CanDeactivateGuard won't prompt before navigation\n            this.customerForm.form.markAsPristine();\n            this.growler.growl('Operation performed successfully.', GrowlerMessageType.Success);\n            // this.router.navigate(['/customers']);\n          } else {\n            const msg = 'Unable to update customer';\n            this.growler.growl(msg, GrowlerMessageType.Danger);\n            this.errorMessage = msg;\n          }\n        },\n          (err: any) => this.logger.log(err));\n    }\n  }\n\n  cancel(event: Event) {\n    event.preventDefault();\n    // Route guard will take care of showing modal dialog service if data is dirty\n    this.router.navigate(['/customers']);\n  }\n\n  delete(event: Event) {\n    event.preventDefault();\n    this.dataService.deleteCustomer(this.customer.id)\n      .subscribe((status: boolean) => {\n        if (status) {\n          this.router.navigate(['/customers']);\n        } else {\n          this.errorMessage = 'Unable to delete customer';\n        }\n      },\n        (err) => this.logger.log(err));\n  }\n\n  canDeactivate(): Promise<boolean> | boolean {\n    if (!this.customerForm.dirty) {\n      return true;\n    }\n\n    // Dirty show display modal dialog to user to confirm leaving\n    const modalContent: IModalContent = {\n      header: 'Lose Unsaved Changes?',\n      body: 'You have unsaved changes! Would you like to leave the page and lose them?',\n      cancelButtonText: 'Cancel',\n      OKButtonText: 'Leave'\n    };\n    return this.modalService.show(modalContent);\n  }\n\n}\n","<div>\n  <form (ngSubmit)=\"submit()\" #customerForm=\"ngForm\" class=\"customer-form\" novalidate>\n    <div class=\"form-group\">\n      <label>First Name</label>\n      <input title=\"first name\" type=\"text\" class=\"form-control\" name=\"firstName\" [(ngModel)]=\"customer.firstName\" #firstName=\"ngModel\" required>\n      <div class=\"alert alert-danger\" [hidden]=\"firstName.pristine || firstName.valid\">First Name is required</div>\n    </div>\n    <div class=\"form-group\">\n      <label>Last Name</label>\n      <input title=\"last name\" type=\"text\" class=\"form-control\" name=\"lastName\" [(ngModel)]=\"customer.lastName\" #lastName=\"ngModel\" required>\n      <div class=\"alert alert-danger\" [hidden]=\"lastName.pristine || lastName.valid\">Last Name is required</div>\n    </div>\n    <div class=\"form-group\">\n      <label>Address</label>\n      <input title=\"address\" type=\"text\" class=\"form-control\" name=\"address\" [(ngModel)]=\"customer.address\" #address=\"ngModel\" required>\n      <div class=\"alert alert-danger\" [hidden]=\"address.pristine || address.valid\">Address is required</div>\n    </div>\n    <div class=\"form-group\">\n      <label>City</label>\n      <input title=\"city\" type=\"text\" class=\"form-control\" name=\"city\" [(ngModel)]=\"customer.city\" #city=\"ngModel\" required>\n      <div class=\"alert alert-danger\" [hidden]=\"city.pristine || city.valid\">City is required</div>\n    </div>\n    <div class=\"form-group\">\n      <label>State</label>\n      <select class=\"form-control\" title=\"states\"\n              [(ngModel)]=\"customer.state.abbreviation\"\n              name=\"state\" \n              required>\n          <option *ngFor=\"let state of states\" [ngValue]=\"state.abbreviation\">{{state.name}}</option>\n      </select>\n    </div>\n    <div *ngIf=\"customer\">\n      <div class=\"alert alert-warning\" *ngIf=\"customer.id && deleteMessageEnabled\">\n         Delete Customer?&nbsp;&nbsp;<button class=\"btn btn-danger\" (click)=\"delete($event)\">Yes</button>&nbsp;&nbsp;\n         <button class=\"btn btn-default\" (click)=\"deleteMessageEnabled = false\">No</button>\n      </div>\n      <button class=\"btn btn-danger\" *ngIf=\"customer.id && !deleteMessageEnabled\" (click)=\"deleteMessageEnabled = true\">Delete</button>&nbsp;&nbsp;\n\n      <div class=\"pull-right\" *ngIf=\"!deleteMessageEnabled\">\n        <button class=\"btn btn-default\" (click)=\"cancel($event)\">Cancel</button>&nbsp;&nbsp;\n        <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"customerForm.pristine || !customerForm.valid\">{{ operationText }}</button>\n      </div>\n    </div>\n    <div class=\"alert alert-danger\" *ngIf=\"errorMessage\">{{ errorMessage }}</div>\n  </form>\n  <br />\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\n\nimport { DataService } from '../../core/services/data.service';\nimport { ICustomer, IOrder, IOrderItem } from '../../shared/interfaces';\n\n@Component({\n  selector: 'cm-customer-orders',\n  templateUrl: './customer-orders.component.html'\n})\nexport class CustomerOrdersComponent implements OnInit {\n\n  orders: IOrder[] = [];\n  customer: ICustomer = {} as ICustomer;\n\n  constructor(private route: ActivatedRoute, private dataService: DataService) { }\n\n  ngOnInit() {\n      // Subscribe to params so if it changes we pick it up.  Could use this.route.parent.snapshot.params[\"id\"] to simplify it.\n      this.route.parent?.params.subscribe((params: Params) => {\n        const id = +params['id'];\n        this.dataService.getCustomer(id).subscribe((customer: ICustomer) => {\n          this.customer = customer;\n        });\n      });\n  }\n\n  ordersTrackBy(index: number, orderItem: any) {\n    return index;\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row\" *ngIf=\"customer && customer.orders\">\n        <h4>Orders for {{ customer.firstName | capitalize }} {{ customer.lastName | capitalize }}</h4>\n        <br />\n        <table class=\"table table-striped table-hover orders-table\">\n            <tr *ngFor=\"let order of customer.orders;trackBy:ordersTrackBy\">\n                <td>{{ order.productName }}</td>\n                <td class=\"text-right\">{{ order.itemCost | currency:'₹':'symbol' }}</td>    \n            </tr>\n            <tr class=\"summary-border\">\n                <td>&nbsp;</td>\n                <td class=\"text-right\">{{ customer.orderTotal | currency:'₹':'symbol' }}</td>\n            </tr>\n        </table>\n    </div>\n    <div *ngIf=\"customer && !customer.orders\" class=\"row\">\n        No orders found\n    </div> \n    <div *ngIf=\"!customer\" class=\"row\">\n        No customer found\n    </div>  \n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CustomerComponent } from './customer.component';\nimport { CustomerOrdersComponent } from './customer-orders/customer-orders.component';\nimport { CustomerDetailsComponent } from './customer-details/customer-details.component';\nimport { CustomerEditComponent } from './customer-edit/customer-edit.component';\nimport { CanActivateGuard } from './guards/can-activate.guard';\nimport { CanDeactivateGuard } from './guards/can-deactivate.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CustomerComponent,\n    children: [\n      { path: 'orders', component: CustomerOrdersComponent },\n      { path: 'details', component: CustomerDetailsComponent },\n      {\n        path: 'edit',\n        component: CustomerEditComponent,\n        canActivate: [CanActivateGuard],\n        canDeactivate: [CanDeactivateGuard]\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [CanActivateGuard, CanDeactivateGuard]\n})\nexport class CustomerRoutingModule {\n  static components = [CustomerComponent, CustomerOrdersComponent, CustomerDetailsComponent, CustomerEditComponent];\n}\n\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'cm-orders',\n  templateUrl: './customer.component.html'\n})\nexport class CustomerComponent implements OnInit {\n\n    // displayMode: CustomerDisplayModeEnum;\n    // displayModeEnum = CustomerDisplayModeEnum;\n\n    constructor(private router: Router) { }\n\n    ngOnInit() {\n\n      // No longer needed due to routerLinkActive feature in Angular\n      // const path = this.router.url.split('/')[3];\n      // switch (path) {\n      //   case 'details':\n      //     this.displayMode = CustomerDisplayModeEnum.Details;\n      //     break;\n      //   case 'orders':\n      //     this.displayMode = CustomerDisplayModeEnum.Orders;\n      //     break;\n      //   case 'edit':\n      //     this.displayMode = CustomerDisplayModeEnum.Edit;\n      //     break;\n      // }\n    }\n\n}\n\n// enum CustomerDisplayModeEnum {\n//   Details=0,\n//   Orders=1,\n//   Edit=2\n// }\n","<div class=\"orders view\">\n    <div class=\"container\">\n        <header>\n            <h3><span class=\"glyphicon glyphicon-user\"></span>&nbsp;&nbsp;Customer Information</h3>\n        </header>\n        <br />\n        <div class=\"navbar\">\n            <ul class=\"nav navbar-nav\">\n                <li class=\"toolbar-item\">\n                    <a routerLink=\"details\" routerLinkActive=\"active\">\n                       <span class=\"glyphicon glyphicon-list\"></span>&nbsp;&nbsp;Customer Details\n                    </a>\n                </li>\n                <li class=\"toolbar-item\">\n                    <a routerLink=\"orders\" routerLinkActive=\"active\">\n                        <span class=\"glyphicon glyphicon-tags\"></span>&nbsp;&nbsp;Customer Orders\n                    </a>\n                </li>\n                <li class=\"toolbar-item\">\n                    <a routerLink=\"edit\" routerLinkActive=\"active\">\n                        <span class=\"glyphicon glyphicon-edit\"></span>&nbsp;&nbsp;Edit Customer\n                    </a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"container\">\n            <router-outlet></router-outlet>\n            <br />\n            <br />\n            <a routerLink=\"/customers\">View all Customers</a>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n\n","import { NgModule } from '@angular/core';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { CustomerRoutingModule } from './customer-routing.module';\n\n@NgModule({\n  imports: [CustomerRoutingModule, SharedModule],\n  declarations: [CustomerRoutingModule.components]\n})\nexport class CustomerModule { }\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from '../../core/services/auth.service';\n\n@Injectable()\nexport class CanActivateGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.isAuthenticated) {\n        return true;\n    }\n\n    // Track URL user is trying to go to so we can send them there after logging in\n    this.authService.redirectUrl = state.url;\n    this.router.navigate(['/login']);\n    return false;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CustomerEditComponent } from '../customer-edit/customer-edit.component';\nimport { LoggerService } from '../../core/services/logger.service';\n\n@Injectable()\nexport class CanDeactivateGuard implements CanDeactivate<CustomerEditComponent> {\n\n  constructor(private logger: LoggerService) {}\n\n  canDeactivate(\n    component: CustomerEditComponent,\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n\n    this.logger.log(`CustomerId: ${route.parent?.params['id']} URL: ${state.url}`);\n\n    // Check with component to see if we're able to deactivate\n    return component.canDeactivate();\n  }\n}\n","import { ModuleWithProviders } from '@angular/core';\nimport { Routes } from '@angular/router';\n\nexport interface ICustomer {\n    id: number;\n    firstName: string;\n    lastName: string;\n    gender: string;\n    address: string;\n    city: string;\n    state: IState;\n    orders?: IOrder[];\n    orderTotal?: number;\n    latitude?: number;\n    longitude?: number;\n}\n\nexport interface IMapDataPoint {\n    longitude: number;\n    latitutde: number;\n    markerText?: string;\n}\n\nexport interface IState {\n    abbreviation: string;\n    name: string;\n}\n\nexport interface IOrder {\n    productName: string;\n    itemCost: number;\n}\n\nexport interface IOrderItem {\n    id: number;\n    productName: string;\n    itemCost: number;\n}\n\nexport interface IPagedResults<T> {\n    totalRecords: number;\n    results: T;\n}\n\nexport interface IUserLogin {\n    email: string;\n    password: string;\n}\n\nexport interface IApiResponse {\n    status: boolean;\n    error?: string;\n}\n"],"names":["ComponentRef","ViewContainerRef","ComponentFactoryResolver","i0","CustomerDetailsComponent","constructor","route","dataService","componentFactoryResolver","ngOnInit","parent","_a","params","subscribe","id","getCustomer","customer","latitude","lazyLoadMapComponent","mapsViewContainerRef","length","MapComponent","console","log","mapComponentRef","createComponent","instance","zoom","enabled","selectors","viewQuery"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}