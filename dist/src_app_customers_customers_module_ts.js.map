{"version":3,"file":"src_app_customers_customers_module_ts.js","mappings":"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","sources":["./src/app/customers/customers-card/customers-card.component.ts","./src/app/customers/customers-card/customers-card.component.html","./src/app/customers/customers-grid/customers-grid.component.ts","./src/app/customers/customers-grid/customers-grid.component.html","./src/app/customers/customers-routing.module.ts","./src/app/customers/customers.component.ts","./src/app/customers/customers.component.html","./src/app/customers/customers.module.ts"],"sourcesContent":["import { Component, Input, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\nimport { ICustomer } from '../../shared/interfaces';\nimport { TrackByService } from '../../core/services/trackby.service';\n\n@Component({\n  selector: 'cm-customers-card',\n  templateUrl: './customers-card.component.html',\n  styleUrls: [ './customers-card.component.css' ],\n  // When using OnPush detectors, then the framework will check an OnPush\n  // component when any of its input properties changes, when it fires\n  // an event, or when an observable fires an event ~ Victor Savkin (Angular Team)\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomersCardComponent implements OnInit {\n\n  @Input() customers: ICustomer[] = [];\n\n  constructor(public trackbyService: TrackByService) { }\n\n  ngOnInit() {\n\n  }\n\n}\n\n","<div class=\"container\">\n    <div class=\"row card-container\">\n        <div class=\"col-sm-6 col-md-4 col-lg-3\" *ngFor=\"let customer of customers;trackBy:trackbyService.customer\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <a [routerLink]=\"['/customers',customer.id,'details']\" class=\"white\">\n                        {{customer.firstName | capitalize }} {{ customer.lastName | capitalize }} \n                    </a>\n                    <a [routerLink]=\"['/customers',customer.id,'edit']\">\n                        <i title=\"Edit\"  \n                           class=\"pull-right glyphicon glyphicon-edit edit-icon white\"></i>\n                    </a>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"clearfix\">\n                        <div class=\"pull-left card-body-left\">\n                            <a href=\"#\" class=\"white\">\n                                <img src=\"assets/images/{{customer.gender | lowercase}}.png\" class=\"card-image\" />\n                            </a>\n                        </div>\n                        <div class=\"pull-left card-body-right\">\n                            <div class=\"card-body-content\">{{customer.city | trim }}, {{customer.state.name}}</div>\n                            <a [routerLink]=\"['/customers',customer.id,'orders']\">View Orders</a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div *ngIf=\"!customers.length\">\n            No Records Found\n        </div>\n    </div>\n</div>","import { Component, Input, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\nimport { SorterService } from '../../core/services/sorter.service';\nimport { TrackByService } from '../../core/services/trackby.service';\nimport { ICustomer } from '../../shared/interfaces';\n\n@Component({\n  selector: 'cm-customers-grid',\n  templateUrl: './customers-grid.component.html',\n  styleUrls: ['./customers-grid.component.css'],\n  // When using OnPush detectors, then the framework will check an OnPush\n  // component when any of its input properties changes, when it fires\n  // an event, or when an observable fires an event ~ Victor Savkin (Angular Team)\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomersGridComponent implements OnInit {\n\n  @Input() customers: ICustomer[] = [];\n\n  constructor(private sorterService: SorterService, public trackbyService: TrackByService) { }\n\n  ngOnInit() {\n\n  }\n\n  sort(prop: string) {\n    this.customers = this.sorterService.sort(this.customers, prop);\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row grid-container\">\n        <div class=\"col-md-10\">\n            <div class=\"table\">\n                <table class=\"table table-striped table-hover\">\n                    <thead>\n                        <tr>\n                            <th>&nbsp;</th>\n                            <th cmSortBy=\"firstName\" (sorted)=\"sort($event)\">First Name</th>\n                            <th cmSortBy=\"lastName\" (sorted)=\"sort($event)\">Last Name</th>\n                            <th cmSortBy=\"address\" (sorted)=\"sort($event)\">Address</th>\n                            <th cmSortBy=\"city\" (sorted)=\"sort($event)\">City</th>\n                            <th cmSortBy=\"state.name\" (sorted)=\"sort($event)\">State</th>\n                            <!-- Or you can do this directly rather than using sort-by directive -->\n                            <th (click)=\"sort('orderTotal')\">Order Total</th>\n                            <th>&nbsp;</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let customer of customers;trackBy:trackbyService.customer\">\n                            <td><img src=\"assets/images/{{ customer.gender | lowercase }}.png\"\n                                    class=\"grid-image\" alt=\"Customer Image\" /></td>\n                            <td><a [routerLink]=\"['/customers',customer.id,'details']\">{{ customer.firstName | capitalize }}</a></td>\n                            <td>{{ customer.lastName | capitalize }}</td>\n                            <td>{{ customer.address }}</td>\n                            <td>{{ customer.city | trim }}</td>\n                            <td>{{ customer.state.name }}</td>\n                            <td>{{ customer.orderTotal | currency:'₹':'symbol' }}</td>\n                            <td><a [routerLink]=\"['/customers',customer.id,'orders']\">View Orders</a></td>\n                        </tr>\n                        <tr *ngIf=\"!customers.length\">\n                            <td>&nbsp;</td>\n                            <td colspan=\"7\">No Records Found</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CustomersComponent } from './customers.component';\nimport { CustomersCardComponent } from './customers-card/customers-card.component';\nimport { CustomersGridComponent } from './customers-grid/customers-grid.component';\n\nconst routes: Routes = [\n  { path: '', component: CustomersComponent }\n];\n\n@NgModule({\n  imports: [ RouterModule.forChild(routes) ],\n  exports: [ RouterModule ]\n})\nexport class CustomersRoutingModule {\n  static components = [ CustomersComponent, CustomersCardComponent, CustomersGridComponent ];\n}\n","import { Component, OnInit, ViewChild, \n  ViewContainerRef, ComponentFactoryResolver, ComponentRef } from '@angular/core';\n\nimport { DataService } from '../core/services/data.service';\nimport { ICustomer, IPagedResults } from '../shared/interfaces';\nimport { FilterService } from '../core/services/filter.service';\nimport { LoggerService } from '../core/services/logger.service';\n\n\n@Component({\n  selector: 'cm-customers',\n  templateUrl: './customers.component.html'\n})\nexport class CustomersComponent implements OnInit {\n\n  title: string = '';\n  filterText: string = '';\n  customers: ICustomer[] = [];\n  displayMode: DisplayModeEnum = DisplayModeEnum.Card;\n  displayModeEnum = DisplayModeEnum;\n  totalRecords = 0;\n  pageSize = 10;\n  mapComponentRef: ComponentRef<any> = {} as ComponentRef<any>;\n  _filteredCustomers: ICustomer[] = [];\n\n  get filteredCustomers() {\n    return this._filteredCustomers;\n  }\n\n  set filteredCustomers(value: ICustomer[]) {\n    this._filteredCustomers = value;\n    this.updateMapComponentDataPoints();\n  }\n\n  @ViewChild('mapsContainer', { read: ViewContainerRef }) \n  private mapsViewContainerRef: ViewContainerRef = {} as ViewContainerRef;\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver,\n    private dataService: DataService,\n    private filterService: FilterService,\n    private logger: LoggerService) { }\n\n  ngOnInit() {\n    this.title = 'Customers';\n    this.filterText = 'Filter Customers:';\n    this.displayMode = DisplayModeEnum.Card;\n\n    this.getCustomersPage(1);\n  }\n\n  changeDisplayMode(mode: DisplayModeEnum) {\n      this.displayMode = mode;\n  }\n\n  pageChanged(page: number) {\n    this.getCustomersPage(page);\n  }\n\n  getCustomersPage(page: number) {\n    this.dataService.getCustomersPage((page - 1) * this.pageSize, this.pageSize)\n        .subscribe((response: IPagedResults<ICustomer[]>) => {\n          this.customers = this.filteredCustomers = response.results;\n          this.totalRecords = response.totalRecords;\n        },\n        (err: any) => this.logger.log(err),\n        () => this.logger.log('getCustomersPage() retrieved customers for page: ' + page));\n  }\n\n  filterChanged(data: string) {\n    if (data && this.customers) {\n        data = data.toUpperCase();\n        const props = ['firstName', 'lastName', 'city', 'state.name'];\n        this.filteredCustomers = this.filterService.filter<ICustomer>(this.customers, data, props);\n    } else {\n      this.filteredCustomers = this.customers;\n    }\n  }\n\n  async lazyLoadMapComponent() {\n    this.changeDisplayMode(DisplayModeEnum.Map);\n    if (!this.mapsViewContainerRef.length) {\n      // Lazy load MapComponent\n      const { MapComponent } = await import('../shared/map/map.component');\n      console.log('Lazy loaded map component!');\n      this.mapComponentRef = this.mapsViewContainerRef.createComponent(MapComponent);\n      this.mapComponentRef.instance.zoom = 2;\n      this.mapComponentRef.instance.dataPoints = this.filteredCustomers;\n      this.mapComponentRef.instance.enabled = true;\n    }\n  }\n\n  updateMapComponentDataPoints() {\n    if (this.mapComponentRef && this.mapComponentRef.instance) {\n      this.mapComponentRef.instance.dataPoints = this.filteredCustomers;\n    }\n  }\n\n\n}\n\nenum DisplayModeEnum {\n  Card = 0,\n  Grid = 1,\n  Map = 2\n}\n","<div class=\"customers view indent\">\n    <div class=\"container\">\n        <header>\n            <h3>\n                <span class=\"glyphicon glyphicon-user\"></span>\n                {{ title }}\n            </h3>\n        </header>\n        <br />\n        <div class=\"row\">\n            <div class=\"col-md-10\">\n                <div class=\"navbar\">\n                    <ul class=\"nav navbar-nav\">\n                        <li class=\"toolbar-item\">\n                            <a (click)=\"changeDisplayMode(displayModeEnum.Card)\" [class.active]=\"displayMode === displayModeEnum.Card\">\n                                <span class=\"glyphicon glyphicon-th-large\"></span> Card View\n                            </a>\n                        </li>\n                        <li class=\"toolbar-item\">\n                            <a (click)=\"changeDisplayMode(displayModeEnum.Grid)\" [class.active]=\"displayMode === displayModeEnum.Grid\">\n                                <span class=\"glyphicon glyphicon-align-justify\"></span> List View\n                            </a>\n                        </li>\n                        <!-- <li class=\"toolbar-item\">\n                            <a (click)=\"lazyLoadMapComponent()\" [class.active]=\"displayMode === displayModeEnum.Map\">\n                                <span class=\"glyphicon glyphicon-map-marker\"></span> Map View\n                            </a>\n                        </li> -->\n                        <li class=\"toolbar-item\">\n                            <a routerLink=\"/customers/0/edit\">\n                                <span class=\"glyphicon glyphicon-plus\"></span> New Customer\n                            </a>\n                        </li>\n                    </ul>\n                    <cm-filter-textbox class=\"navbar-right\"\n                     (changed)=\"filterChanged($event)\"></cm-filter-textbox>\n                </div>\n            </div>\n        </div>\n        \n        <cm-customers-card \n          [customers]=\"filteredCustomers\" \n          [hidden]=\"displayMode !== displayModeEnum.Card\"></cm-customers-card>\n    \n        <cm-customers-grid \n          [customers]=\"filteredCustomers\" \n          [hidden]=\"displayMode !== displayModeEnum.Grid\"></cm-customers-grid>\n\n        <!-- lazy load the map component -->\n        <div [hidden]=\"displayMode !== displayModeEnum.Map\">\n            <ng-container #mapsContainer></ng-container>\n        </div>\n\n        <!-- \n            This could be used to eagerly load the map component.\n            Would need to import MapModule into either SharedModule (and export it) or \n            into CustomersModule to use it this way.\n        -->\n        <!-- <cm-map *ngIf=\"filteredCustomers.length\" \n            [zoom]=\"2\" \n            [enabled]=\"displayMode === displayModeEnum.Map\" \n            [hidden]=\"displayMode !== displayModeEnum.Map\">\n          <cm-map-point \n            *ngFor=\"let customer of filteredCustomers\" \n            [latitude]=\"customer.latitude\" \n            [longitude]=\"customer.longitude\"\n            [markerText]=\"'<h3>' + customer.firstName + ' ' + customer.lastName + '</h3>' + customer.city + ', ' + customer.state.name\"></cm-map-point>\n        </cm-map> -->\n\n        <cm-pagination\n            [totalItems]=\"totalRecords\" \n            [pageSize]=\"pageSize\" \n            (pageChanged)=\"pageChanged($event)\"></cm-pagination>\n          \n    </div>\n</div>\n","import { NgModule } from '@angular/core';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { CustomersRoutingModule } from './customers-routing.module';\n\n@NgModule({\n  imports: [CustomersRoutingModule, SharedModule],\n  declarations: [CustomersRoutingModule.components]\n})\nexport class CustomersModule { }\n"],"names":["ViewContainerRef","ComponentFactoryResolver","ComponentRef","CustomersComponent","constructor","componentFactoryResolver","dataService","filterService","logger","DisplayModeEnum","Card","filteredCustomers","_filteredCustomers","value","updateMapComponentDataPoints","ngOnInit","title","filterText","displayMode","getCustomersPage","changeDisplayMode","mode","pageChanged","page","pageSize","subscribe","response","customers","results","totalRecords","err","log","filterChanged","data","toUpperCase","props","filter","lazyLoadMapComponent","Map","mapsViewContainerRef","length","MapComponent","console","mapComponentRef","createComponent","instance","zoom","dataPoints","enabled","i0","selectors","viewQuery","ctx"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}